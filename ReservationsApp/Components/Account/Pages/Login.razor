@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using ReservationsApp.Data.Application
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
<div class="col-md-4">
<section>
<StatusMessage Message="@errorMessage" />
<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
<ValidationSummary class="text-danger" role="alert" />
<div class="form-floating mb-3">
<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
<label for="email" class="form-label">Email</label>
<ValidationMessage For="() => Input.Email" class="text-danger" />
</div>
<div class="form-floating mb-3">
<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
<label for="password" class="form-label">Password</label>
<ValidationMessage For="() => Input.Password" class="text-danger" />
</div>
<div>
<button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
</div>
<div>
<p>
<a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
</p>
</div>
</EditForm>
</section>
</div>
</div>

@code {
private string? errorMessage;

[CascadingParameter]
private HttpContext HttpContext { get; set; } = default!;

[SupplyParameterFromForm]
private InputModel Input { get; set; } = new();

[SupplyParameterFromQuery]
private string? ReturnUrl { get; set; }


public async Task LoginUser()
{
var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, isPersistent: false, lockoutOnFailure: false);
if (result.Succeeded)
{
Logger.LogInformation("User logged in.");
var user = HttpContext.User;
NavigationManager.NavigateTo("/");
}
else
{
errorMessage = "Error: Invalid login attempt.";
}
}

private sealed class InputModel
{
[Required]
[EmailAddress]
public string Email { get; set; } = "";

[Required]
[DataType(DataType.Password)]
public string Password { get; set; } = "";
}

}