@using ReservationsApp.Data.Application
@using ReservationsApp.Data.Reservations
@using ReservationsApp.Services
@using Microsoft.AspNetCore.Components.Server
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IReservationService service
@inject AuthenticationStateProvider provider
@inject UserManager<ApplicationUser> manager
<div id='calendar'></div>
<PopupAdd @ref=@popupAdd onSaveButtonClicked="Save">
</PopupAdd>
<PopupEdit @ref=@popupEdit onSaveButtonClicked="Save">
</PopupEdit>

@code {
    string _id;
    private PopupAdd popupAdd;
    private PopupEdit popupEdit;

    [Parameter]
    public string Id
    {
        get => _id ?? $"Calendar_{uid}";
        set => _id = value;
    }

    [Parameter]
    public bool showMode { get; set; }

    [Parameter]
    public List<CalendarEvent> Events { get; set; } = new();


    readonly string uid = Guid.NewGuid().ToString().ToLower().Replace("-", "");
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showMode)
            await JSRuntime.InvokeVoidAsync("initShow", DotNetObjectReference.Create(this));
        else
            await JSRuntime.InvokeVoidAsync("init", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task CalendarSellClicked(string identifier)
    {
        var date = DateTime.Parse(identifier);
        var state = await provider.GetAuthenticationStateAsync();
        var user = state.User;
        var userId = manager.GetUserId(user);
        if (!ShouldNotShowPopup(date, userId))
        {
            await popupAdd.ShowPopupAsync(date, userId);
        }
    }

    [JSInvokable]
    public async Task CalendarEventClicked(string identifier)
    {
        var eventToEdit = Events.First(x => x.Identifier == identifier);
        await popupEdit.ShowPopupAsync(eventToEdit);
    }

    protected async Task Save()
    {
    }

    [JSInvokable]
    public async Task<List<CalendarEvent>> GetEvents(DateTime start, DateTime end)
    {
        Events = await service.GetCalendarEvents(start, end, showMode);
        return Events;
    }

    private bool ShouldNotShowPopup(DateTime date, string userId)
    {
        return date < DateTime.Today || date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday
        || service.UserHasReservation(userId);
    }
}
